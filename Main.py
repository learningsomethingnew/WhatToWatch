from Classes.Movie import Movie
from Classes.User import User
from Classes.ReviewData import ReviewData
from ProcessData import ProcessData
from Classes.Logic import Logic
from CustomExceptions.StandardClassExemptions import MovieNotFound
from operator import itemgetter


class Main():
    """Main Constructor"""

    def __init__(self):
        pd = ProcessData()
        deli_with_line = '|'
        deli_with_tabs = '\t'
        encoding_latin = 'latin_1'

        # Reads the movie information from files and then creates
        # instances of each item
        # movie_id | instance of movie
        self.movie_dict = pd.read_file_return_dict('u.item',
                                                   encoding_latin, deli_with_line)
        self.movie_dict = pd.create_init_inst_of_rows(self.movie_dict, Movie)

        # Reads the user information from files and then creates
        # instances of each item
        # user_id | instance of user
        self.user_dict = pd.read_file_return_dict('u.user',
                                                  encoding_latin, deli_with_line)
        self.user_dict = pd.create_init_inst_of_rows(self.user_dict, User)

        # file rows are  user id | movie id | rating | timestamp
        self.review_list_raw_data = pd.read_file_return_list('u.data',
                                                    encoding_latin, deli_with_tabs)

        # takes the user review data and processes it into the classes
        self.process_ratings()

        # set up a list of the movies containing a tuple of
        # [(movie_id, num_of_reviews, average_score)]
        self.list_compiled_movie_reviews = []

        #list derived from sorting on num of reviews and then score
        self.list_top_movies_by_popularity = []

        #list generated by ordering top scores by a min review count
        self.list_by_high_score = []
        self.min_review_needed = 50

    def Main(self):

        main = True
        self.set_list_compiled_movie_reviews()
        self.get_top_ten_for_user_who_has_not_rated(123)
        exit()

    """Takes the raw data"""
    def process_ratings(self):
        for row in self.review_list_raw_data:
            # tests to see that movie exists in both classes
            if self.movie_dict[row[1]] and self.user_dict[row[0]]:
                #passes review data to the classes.
                self.movie_dict[row[1]].add_ratings_to_dict(row[0], row[2])
                self.user_dict[row[0]].add_to_user_rating_dict(row[1], row[2])
            else:
                raise MovieNotFound("Movie ID {} was entered but not found".format())

    def prompt_user(self):
        print("Find a movie rating by id")
        return input(">>>")

    """Sets a list of the top movies sorted by score with min
    count of reviews. List created contains:
    [(movie_id, movie_title, average_score)]"""
    def set_list_by_high_score(self):
        for row in self.list_compiled_movie_reviews:
            if row[1] > self.min_review_needed:
                temp_movie_name = self.movie_dict[row[0]].get_movie_title()
                self.list_by_high_score.append\
                    ((row[0], temp_movie_name, row[2]))

    def get_list_by_high_score(self):
        self.set_list_by_high_score()
        return sorted(self.list_by_high_score,
                      key=lambda score: score[2], reverse=True)

    """Sorts top movies list by
        num of reviews and then average rating.
        [(movie_id, num_of_reviews, average_score)]"""
    def set_list_top_movies_by_popularity(self):
        self.list_top_movies_by_popularity = (
            sorted(self.list_compiled_movie_reviews,
                   key=itemgetter(1, 2), reverse=True))

    """Returns the sorted top 10 movies by
    num of reviews and then average rating."""
    def get_top_ten_movies_by_popularity(self):
        self.set_list_top_movies_by_popularity()
        for row in self.list_top_movies_by_popularity:
            print(self.movie_dict[row[1]].get_movie_title())



    """Compiles a list of tuples of user reviews containing:
        [(movie_id, num_of_reviews, average_score)]"""
    def set_list_compiled_movie_reviews(self):
        for row in self.movie_dict:
            # parameters for reviews dict for readability
            num_of_reviews = self.movie_dict[row].get_num_of_reviews()
            mean_score = self.movie_dict[row].get_movie_mean_score()

            # user_id_list = self.movie_dict[row].get_list_users_who_reviewed()

            temp_row = (row, num_of_reviews, mean_score)
            self.list_compiled_movie_reviews.append(temp_row)

    """find the top X movies by average rating that a
    specific user has not rated."""
    def get_top_ten_for_user_who_has_not_rated(self, a_user):
        temp_user_list = self.user_dict[a_user].get_all_reviewed_movies()
        #pull list of movie ids
        temp_high_score_list = []
        for row in self.get_list_by_high_score():
            temp_high_score_list.append(row[0])
        return self.remove_duplicates_keep_order(temp_high_score_list, temp_user_list)

    """takes in 2 lists, returns an ordered list based off
        of list_a"""
    def remove_duplicates_keep_order(self, list_a, list_b):
        temp_list = list_a + list_b
        no_dupes = []
        [no_dupes.append(i) for i in temp_list if not no_dupes.count(i)]
        return no_dupes



if __name__ == '__main__':
    f = Main()
    f.Main()

    # print(f.find_movie_by_id(123))

    # f.main()

    #########################################################################################
    #                                      Old Code
    #########################################################################################
    #
    # """Returns the average/mean rating for a specific movie"""
    #
    #
    # def get_mean_rating_for_movie(self, a_movie_id):
    #     return self.movie_dict[a_movie_id].get_movie_mean_score()
    #
    #
    # """Returns all of the movie reviews in a dict"""
    #
    #
    # def get_all_movie_ratings(self, a_movie_id):
    #     return self.movie_dict[a_movie_id].get_all_reviews()
    #
    #
    # def get_num_of_movie_reviews(self, a_movie_id):
    #     return self.movie_dict[a_movie_id].get_num_of_reviews()
